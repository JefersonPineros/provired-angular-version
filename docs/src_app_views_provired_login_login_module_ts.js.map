{"version":3,"file":"src_app_views_provired_login_login_module_ts.js","mappings":"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","sources":["./src/app/models/login/error_login.ts","./src/app/models/login/login.ts","./src/app/services/interceptor/login-interceptor.service.ts","./src/app/services/login/terminos.service.ts","./src/app/views/provired/login/login-routing.module.ts","./src/app/views/provired/login/login.component.ts","./src/app/views/provired/login/login.component.html","./src/app/views/provired/login/login.module.ts"],"sourcesContent":["export class ErrorLogin {\r\n  constructor(\r\n    public msg?: string,\r\n    public status?: number\r\n  ) {}\r\n}\r\n","export class Login {\r\n  constructor(\r\n    public user?: string,\r\n    public password?: string\r\n  ){}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpEvent,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { filter, map, Observable } from 'rxjs';\nimport { SessionStorageService } from '../utils/session-storage.service';\nimport { Token } from 'src/app/constans/token-const';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class LoginInterceptorService implements HttpInterceptor {\n  constructor(private storage: SessionStorageService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (req.method == 'POST') {\n      return next.handle(this.setHeader(req)).pipe(\n        filter((event) => event instanceof HttpResponse),\n        map((event: HttpResponse<any>) => {\n          this.storage.setSession(event.body);\n          return event.clone();\n        })\n      );\n    } else {\n      return next.handle(this.addToken(req));\n    }\n  }\n\n  addToken(req: HttpRequest<any>) {\n    const token = Token.TOKEN_AUTHORIZATION.TOKEN;\n\n    return req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  setHeader(req: HttpRequest<any>) {\n    if (req.url == `${environment.apiBaseUrl + 'login'}`) {\n      const requ = req.clone({\n        setHeaders: {\n          Accept: '*/*',\n          'Content-Type': 'text/plain;charset-UTF-8',\n        },\n      });\n      return requ;\n    } else {\n      return req;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TerminosService {\n\n  constructor(private http: HttpClient) { }\n\n  public aceptarTerminos(user: string): Observable<any> {\n    return this.http.get(environment.apiBaseUrl + 'user/terminos/' + user);\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'login',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ErrorLogin } from 'src/app/models/login/error_login';\r\nimport { Login } from 'src/app/models/login/login';\r\nimport { LoginServiceService } from 'src/app/services/login/login-service.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { MessageService } from 'primeng/api';\r\nimport { MessageModel } from 'src/app/models/login/utils/messageModel';\r\nimport { SessionStorageService } from 'src/app/services/utils/session-storage.service';\r\nimport { TerminosService } from 'src/app/services/login/terminos.service';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  providers: [MessageService],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public formLogin: FormGroup = new FormGroup({});\r\n\r\n  public loginModel: Login = new Login();\r\n\r\n  public error_login: ErrorLogin = new ErrorLogin();\r\n\r\n  public showModalTerminos: boolean = false;\r\n\r\n  public messageTerminos: string = '';\r\n\r\n  public aceptarTerminos: boolean = false;\r\n\r\n  constructor(\r\n    private accessLogin: LoginServiceService,\r\n    private route: Router,\r\n    private spinner: NgxSpinnerService,\r\n    private message: MessageService,\r\n    private session: SessionStorageService,\r\n    private terminos: TerminosService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.session.clearAllSession();\r\n  }\r\n\r\n  login(): void {\r\n    this.spinner.show();\r\n    this.accessLogin.login(this.loginModel).subscribe({\r\n      next: (resp) => {\r\n        this.spinner.hide();\r\n        if (resp.tipousuario !== 'S') {\r\n          setTimeout(() => {\r\n            this.route.navigate(['provired/home-provired']);\r\n          }, 500);\r\n        } else {\r\n          if (!resp.terminos_ok) {\r\n            this.aceptarTerminos = true;\r\n            this.showModalTerminos = true;\r\n            this.messageTerminos = resp.msg!;\r\n            this.session.clearAllSession();\r\n          } else {\r\n            setTimeout(() => {\r\n              this.route.navigate(['provired/home-provired']);\r\n            }, 500);\r\n          }\r\n        }\r\n      },\r\n      error: (error) => {\r\n        if (error instanceof HttpErrorResponse) {\r\n          this.spinner.hide();\r\n          let message_model: MessageModel = new MessageModel(\r\n            'error',\r\n            `${error.error.status}`,\r\n            error.error.msg\r\n          );\r\n          this.message.add(message_model);\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  actionAcept(): void {\r\n    this.spinner.show();\r\n    this.terminos.aceptarTerminos(this.loginModel.user!).subscribe({\r\n      next: (resp) => {\r\n        if (resp.status == 200) {\r\n          this.spinner.hide();\r\n          this.showModalTerminos = false;\r\n          this.aceptarTerminos = false;\r\n          this.login();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.log(error);\r\n        this.spinner.hide();\r\n      },\r\n    });\r\n  }\r\n\r\n  olvidoContrasena() {\r\n    this.route.navigate(['provired/recuperar-contrasena/update-pass']);\r\n  }\r\n}\r\n","<div class=\"grid\">\r\n  <div class=\"col-12\">\r\n    <div class=\"grid\">\r\n      <div\r\n        class=\"lg:col-4 md:col-4 sm:col-6 sm:col-offset-3 col-12 lg:col-offset-4 md:col-offset-4\"\r\n      >\r\n        <div class=\"relative\">\r\n          <div class=\"static mt-5\">\r\n            <div class=\"absolute botton right-0 img-logo\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"aling-box\">\r\n          <app-card-component [footer]=\"true\">\r\n            <ng-template pTemplate=\"header\">\r\n              <div class=\"pt-5 pl-5\">\r\n                <h2>Bienvenido a provired</h2>\r\n              </div>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"content\">\r\n              <div class=\"grid p-4\">\r\n                <div class=\"col-12\">\r\n                  <input-text\r\n                    placeHolder=\"Usuario\"\r\n                    [(model)]=\"loginModel.user\"\r\n                    (grupo)=\"(formLogin)\"\r\n                    [requerido]=\"true\"\r\n                    styleInput=\"help-text\"\r\n                    [placeHolderActive]=\"false\"\r\n                  >\r\n                  </input-text>\r\n\r\n                  <input-text\r\n                    placeHolder=\"Contraseña\"\r\n                    [(model)]=\"loginModel.password\"\r\n                    (grupo)=\"(formLogin)\"\r\n                    [requerido]=\"true\"\r\n                    styleInput=\"help-text\"\r\n                    [placeHolderActive]=\"false\"\r\n                    tipo=\"password\"\r\n                  >\r\n                  </input-text>\r\n                </div>\r\n                <div class=\"col-12\" *ngIf=\"aceptarTerminos\">\r\n                  <span\r\n                    >Debe aceptar terminos y condiciones para poder\r\n                    acceder.*</span\r\n                  >\r\n                </div>\r\n              </div>\r\n              <div class=\"grid\">\r\n                <div class=\"col-12\">\r\n                  <app-button-component\r\n                    nameButton=\"Olvidé mi contraseña!\"\r\n                    clase=\"p-button-link\"\r\n                    (eventEmiter)=\"olvidoContrasena()\"\r\n                  ></app-button-component>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"footer\">\r\n              <div class=\"grid\">\r\n                <div class=\"col-12\">\r\n                  <div class=\"flex justify-content-center\">\r\n                    <app-button-component\r\n                      nameButton=\"Ingresar\"\r\n                      type=\"button\"\r\n                      (eventEmiter)=\"login()\"\r\n                    ></app-button-component>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n          </app-card-component>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<modal-component\r\n  [visible]=\"showModalTerminos\"\r\n  (closeModal)=\"showModalTerminos = false\"\r\n>\r\n  <ng-template pTemplate=\"title\">\r\n    <h3>Terminos y condiciones</h3>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"content\">\r\n    <textarea disabled style=\"width: 100%; max-height: 480px\" id=\"\" rows=\"60\">{{\r\n      messageTerminos\r\n    }}</textarea>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"footer\">\r\n    <app-button-component\r\n      nameButton=\"Aceptar terminos y condiciones\"\r\n      (eventEmiter)=\"actionAcept()\"\r\n    ></app-button-component>\r\n  </ng-template>\r\n</modal-component>\r\n\r\n<p-toast></p-toast>\r\n\r\n<ngx-spinner\r\n  bdColor=\"rgba(0, 0, 0, 0.8)\"\r\n  size=\"medium\"\r\n  color=\"#fff\"\r\n  type=\"ball-clip-rotate-multiple\"\r\n  [fullScreen]=\"true\"\r\n>\r\n  <p style=\"color: white\">Loading...</p>\r\n</ngx-spinner>\r\n","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login.component';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport {\r\n  ButtonComponentModule,\r\n  CardComponentModule,\r\n  InputTextComponentModule,\r\n  ModalComponentModule,\r\n} from 'src/app/components/components.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginServiceService } from 'src/app/services/login/login-service.service';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { LoginInterceptorService } from 'src/app/services/interceptor/login-interceptor.service';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { TerminosService } from 'src/app/services/login/terminos.service';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n\r\n    CardComponentModule,\r\n    InputTextComponentModule,\r\n    ButtonComponentModule,\r\n    NgxSpinnerModule,\r\n    ToastModule,\r\n    ModalComponentModule,\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  providers: [\r\n    LoginServiceService,\r\n    TerminosService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: LoginInterceptorService,\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class LoginModule {}\r\n"],"names":["ErrorLogin","constructor","msg","status","Login","user","password","HttpResponse","filter","map","Token","environment","LoginInterceptorService","storage","intercept","req","next","method","handle","setHeader","pipe","event","setSession","body","clone","addToken","token","TOKEN_AUTHORIZATION","TOKEN","setHeaders","Authorization","url","apiBaseUrl","requ","Accept","factory","TerminosService","http","aceptarTerminos","get","providedIn","RouterModule","LoginComponent","routes","path","redirectTo","pathMatch","component","LoginRoutingModule","forChild","imports","exports","FormGroup","HttpErrorResponse","MessageService","MessageModel","i0","accessLogin","route","spinner","message","session","terminos","ngOnInit","clearAllSession","login","show","loginModel","subscribe","resp","hide","tipousuario","setTimeout","navigate","terminos_ok","showModalTerminos","messageTerminos","error","message_model","add","actionAcept","console","log","olvidoContrasena","selectors","features","decls","vars","consts","template","HttpClientModule","CommonModule","ButtonComponentModule","CardComponentModule","InputTextComponentModule","ModalComponentModule","FormsModule","ReactiveFormsModule","LoginServiceService","HTTP_INTERCEPTORS","NgxSpinnerModule","ToastModule","LoginModule","provide","useClass","multi","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}