{"version":3,"file":"src_app_views_provired_provired_module_ts.js","mappings":"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","sources":["./src/app/guards/access-permissions.guard.ts","./src/app/models/login/responseLogin.ts","./src/app/services/utils/session-storage.service.ts","./src/app/views/provired/provired-routing.module.ts","./src/app/views/provired/provired.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { SessionStorageService } from '../services/utils/session-storage.service';\nimport { ResponseLogin } from '../models/login/responseLogin';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccessPermissionsGuard implements CanActivate {\n  constructor(private session: SessionStorageService) {}\n\n  canActivate():\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    if (this.getSession()) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getSession(): boolean {\n    let sessionActive = this.session.getSession();\n    if (sessionActive) {\n      if (sessionActive.tipousuario == 'S') {\n        if (sessionActive.status == 200 && sessionActive.terminos_ok) {\n          return true;\n        } else {\n          return false;\n        }\n      } else if (sessionActive.tipousuario == 'A') {\n        if (sessionActive.status == 200) {\n          return true;\n        } else {\n          alert('Es necesario iniciar sesion.');\n          return false;\n        }\n      } else {\n        if (sessionActive.status == 200) {\n          return true;\n        } else {\n          alert('Es necesario iniciar sesion.');\n          return false;\n        }\n      }\n    } else {\n      alert('Es necesario iniciar sesion.');\n      return false;\n    }\n  }\n}\n","export class ResponseLogin {\r\n  constructor(\r\n    public user?: string,\r\n    public status?: number,\r\n    public redirect?: boolean,\r\n    public tipousuario?: string,\r\n    public terminos_ok?: boolean,\r\n    public msg?: string,\r\n    public token?: string\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ResponseLogin } from 'src/app/models/login/responseLogin';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionStorageService {\n\n  public userLogin: ResponseLogin = new ResponseLogin();\n\n  constructor() { }\n\n  public setSession(user_login: ResponseLogin): any {\n    sessionStorage.setItem(\"session\", JSON.stringify(user_login) );\n  }\n\n  public getSession(): ResponseLogin {\n    this.userLogin = JSON.parse( sessionStorage.getItem(\"session\")! );\n    return this.userLogin;\n  }\n\n  public createStorage(key: string, data: string): void {\n    sessionStorage.setItem(key, data);\n  }\n\n  public getStorage(key: string, tipo: string): any {\n    switch (tipo) {\n      case 'string':\n        return sessionStorage.getItem(key);\n\n      case 'number':\n        return parseInt(sessionStorage.getItem(key)!) ;\n\n      case 'boolean':\n\n        break;\n      case 'json':\n        return JSON.parse( sessionStorage.getItem(key)! );\n      default:\n        break;\n    }\n  }\n\n  public clearAllSession(): void {\n    sessionStorage.clear();\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AccessPermissionsGuard } from 'src/app/guards/access-permissions.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    redirectTo: 'access-provired',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: 'access-provired',\r\n    loadChildren: () =>\r\n      import('./login/login.module').then((m) => m.LoginModule),\r\n  },\r\n  {\r\n    path: 'home-provired',\r\n    canActivate: [AccessPermissionsGuard],\r\n    loadChildren: () => import('./home/home.module').then((m) => m.HomeModule),\r\n  },\r\n  {\r\n    path: 'recuperar-contrasena',\r\n    loadChildren: () =>\r\n      import('./recuperar-contrasena/recuperar-contrasena.module').then(\r\n        (m) => m.RecuperarContrasenaModule\r\n      ),\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ProviredRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ProviredRoutingModule } from './provired-routing.module';\r\nimport { AccessPermissionsGuard } from 'src/app/guards/access-permissions.guard';\r\nimport { RecuperarContrasenaComponent } from './recuperar-contrasena/recuperar-contrasena.component';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, ProviredRoutingModule],\r\n  providers: [AccessPermissionsGuard],\r\n})\r\nexport class ProviredModule {}\r\n"],"names":["AccessPermissionsGuard","constructor","session","canActivate","getSession","sessionActive","tipousuario","status","terminos_ok","alert","factory","providedIn","ResponseLogin","user","redirect","msg","token","SessionStorageService","setSession","user_login","sessionStorage","setItem","JSON","stringify","userLogin","parse","getItem","createStorage","key","data","getStorage","tipo","parseInt","clearAllSession","clear","RouterModule","routes","path","redirectTo","pathMatch","loadChildren","then","m","LoginModule","HomeModule","RecuperarContrasenaModule","ProviredRoutingModule","forChild","imports","exports","CommonModule","ProviredModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}